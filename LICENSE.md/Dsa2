Merge Sorted Array - LeetCode
Problem Statement:
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Example 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
Follow up: Can you come up with an algorithm that runs in O(m + n) time?

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        //approach 1 : TC = O(m * n); SC = O(1)
        /*int nums1index = 0, nums2index = 0, temp = -1, c = m;
        
        while(nums1index < c && nums2index < n) {
            
            if(nums1[nums1index] < nums2[nums2index])
                nums1index++;
            else if(nums1[nums1index] >= nums2[nums2index]) {
                
                for(int i = m + n - 1; i > nums1index; i--){
                    
                    nums1[i] = nums1[i - 1];
                    
                }
                
                nums1[nums1index] = nums2[nums2index];
                
                nums1index++;
                nums2index++;
                
                c++;
                
            }
            
        }
        
        if(nums1index == c && nums2index < n) {
            
            while(nums1index < m + n && nums2index < n) {
                
                nums1[nums1index] = nums2[nums2index];
                nums2index++;
                nums1index++;
                
            }
            
        }*/
        
        //approach 2 TC = O(m * n); SC = O(m + n)
        /*int[] nums = new int[m + n];
        
        int i = 0, j = 0, c = 0;
        
        while(i < m && j < n) {
            
            if(nums1[i] <= nums2[j]) {
                
                nums[c] = nums1[i];
                i++;
                
            }
            else {
                
                nums[c] = nums2[j];
                j++;
                
            }
            
            c++;
        }
        
        if(i == m && j < n) {
            
            for(int k = j; k < n; k++, c++) {
                
                nums[c] = nums2[k];
                
            }
            
        }
        else if(i < m && j == n) {
            
            for(int k = i; k < m; k++, c++) {
                
                nums[c] = nums1[k];
                
            }
            
        }
        
        for(int k = 0; k < m + n; k++) {
            
            nums1[k] = nums[k];
        }*/
        
        //approah 3 : TC = (m + n); SC = O(1)
        
        int i = m - 1;
        int j = n - 1;
        int index = m + n - 1;
        
        while(index >= 0 && i >= 0 && j >= 0) {
            
            nums1[index--] = nums1[i] >= nums2[j] ? nums1[i--] : nums2[j--];
            
        }
        
        while(j >= 0) {
            
            nums1[index--] = nums2[j--];
            
        }
    }
}
